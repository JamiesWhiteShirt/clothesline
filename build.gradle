buildscript {
    repositories {
        jcenter()
        maven { url = 'http://files.minecraftforge.net/maven' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.1.0'
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'

version = '1.12.2-0.0.2.0'
group = 'com.jamieswhiteshirt'
archivesBaseName = 'clothesline'

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = '1.12.2-14.23.5.2768'
    runDir = 'run'
    mappings = 'stable_39'
}

repositories {
    jcenter()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        url 'http://maven.jamieswhiteshirt.com/libs-snapshot/'
    }
    maven {
        url 'http://maven.jamieswhiteshirt.com/libs-release/'
    }
}

configurations {
    contained {
        transitive = false
    }
}

dependencies {
    contained 'com.jamieswhiteshirt:rtree-3i-lite:0.1-SNAPSHOT'
    compile 'com.jamieswhiteshirt:rtree-3i-lite:0.1-SNAPSHOT'
    contained 'com.jamieswhiteshirt:clothesline-hooks:1.12.2-0.0.1.0'
    deobfCompile 'com.jamieswhiteshirt:clothesline-hooks:1.12.2-0.0.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.+'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.+'
    testCompile 'org.mockito:mockito-core:2.+'
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    sourceSets sourceSets.api
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    exclude '**/*.psd'
}

// We need two jars with slightly different dependency management.

// Let build systems handle the transitive dependencies of the jar
// The jar must not include contained dependencies
jar {
    from sourceSets.api.output
    from sourceSets.main.output

    manifest {
        attributes([
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}",
                'Timestamp': System.currentTimeMillis()
        ])
    }
}

// The bundle jar is ready to be dropped in the mods folder and must contain its dependencies
// The bundle jar must include contained dependencies
task bundleJar(type: Jar) {
    classifier 'bundle'

    from sourceSets.api.output
    from sourceSets.main.output

    from(configurations.contained.files) {
        include '*'
        into 'META-INF/libraries'
    }

    manifest {
        attributes([
                'ContainedDeps': configurations.contained.files.collect { it.name }.join(' '),
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}",
                'Timestamp': System.currentTimeMillis()
        ])
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.api.allSource
    from sourceSets.main.allSource
    classifier = 'sources'
}

// The jar is reobfuscated with the default reobfJar task
// Create reobfBundleJar task
reobf.create('bundleJar')

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    inputFile = jar.archivePath
    outputFile = jar.archivePath

    keyStore = project.properties.keyStore
    alias = project.properties.keyStoreAlias
    storePass = project.properties.keyStorePass
    keyPass = project.properties.keyStoreKeyPass
}

task signBundleJar(type: SignJar, dependsOn: reobfBundleJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    inputFile = bundleJar.archivePath
    outputFile = bundleJar.archivePath

    keyStore = project.properties.keyStore
    alias = project.properties.keyStoreAlias
    storePass = project.properties.keyStorePass
    keyPass = project.properties.keyStoreKeyPass
}

artifacts {
    archives(signJar.outputFile) {
        builtBy signJar
    }
    archives(signBundleJar.outputFile) {
        builtBy signBundleJar
    }
    archives sourceJar
}

project.ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: 'https://maven.jamieswhiteshirt.com/libs-release/') {
            authentication(userName: project.properties.mavenUser, password: project.properties.mavenPassword)
        }
        snapshotRepository(url: 'https://maven.jamieswhiteshirt.com/libs-snapshot/') {
            authentication(userName: project.properties.mavenUser, password: project.properties.mavenPassword)
        }

        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
    }
}

task resolutionTest(type: DefaultTask) {
    println file(signBundleJar.outputFile)
}

curseforge {
    if (project.hasProperty('curseForgeApiKey')) {
        apiKey = project.properties.curseForgeApiKey
    }
    project {
        id = '300262'
        changelogType = 'markdown'
        changelog = file('CHANGELOG.md')
        releaseType = 'beta'
        mainArtifact(signBundleJar.outputFile) {
            displayName = "Clothesline $project.version"
        }
    }
}

afterEvaluate {
    // CurseGradle has ForgeGradle integration, but it falls short for signed jars
    // CurseGradle generates tasks in afterEvaluate for each project as such
    tasks.curseforge300262.dependsOn signBundleJar
}
